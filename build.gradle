/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */

buildscript {
    apply from: 'build-tools/repositories.gradle'

    ext {
        opensearch_group = "org.opensearch"
        isSnapshot = "true" == System.getProperty("build.snapshot", "true")
        opensearch_version = System.getProperty("opensearch.version", "2.15.0-SNAPSHOT")
        buildVersionQualifier = System.getProperty("build.version_qualifier", "")

        // 2.0.0-rc1-SNAPSHOT -> 2.0.0.0-rc1-SNAPSHOT
        version_tokens = opensearch_version.tokenize('-')
        opensearch_build = version_tokens[0] + '.0'
        if (buildVersionQualifier) {
            opensearch_build += "-${buildVersionQualifier}"
        }
        if (isSnapshot) {
            opensearch_build += "-SNAPSHOT"
        }

        common_utils_version = System.getProperty("common_utils.version", opensearch_build)
        kotlin_version = System.getProperty("kotlin.version", "1.9.23")
    }

    repositories {
        mavenLocal()
        maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://ci.opensearch.org/ci/dbc/snapshots/lucene/" }
    }

    dependencies {
        classpath "${opensearch_group}.gradle:build-tools:${opensearch_version}"
        classpath "gradle.plugin.com.dorongold.plugins:task-tree:1.5"
        configurations.all {
            resolutionStrategy {
                force("org.eclipse.platform:org.eclipse.core.runtime:3.29.0") // for spotless transitive dependency CVE (for 3.26.100)
            }
        }
    }
}

plugins {
    id 'com.netflix.nebula.ospackage' version "11.5.0"
    id 'java'
    id "io.freefair.lombok" version "8.4"
    id 'jacoco'
}

apply plugin: "com.dorongold.task-tree"

allprojects {
    group = 'org.opensearch'
    version = opensearch_build

    apply from: "$rootDir/build-tools/repositories.gradle"

    plugins.withId('java') {
        sourceCompatibility = targetCompatibility = JavaVersion.VERSION_11
    }
}

subprojects {
    configurations {
        testImplementation.extendsFrom compileOnly
    }

    configurations.all {
        // Force spotless depending on newer version of guava due to CVE-2023-2976. Remove after spotless upgrades.
        resolutionStrategy.force "com.google.guava:guava:32.1.2-jre"
        resolutionStrategy.force 'org.apache.commons:commons-compress:1.26.0'
    }
}

ext {
    projectSubstitutions = [:]
    licenseFile = rootProject.file('LICENSE.txt')
    noticeFile = rootProject.file('NOTICE.txt')
}

// updateVersion: Task to auto increment to the next development iteration
task updateVersion {
    onlyIf { System.getProperty('newVersion') }
    doLast {
        ext.newVersion = System.getProperty('newVersion')
        println "Setting version to ${newVersion}."
        // String tokenization to support -SNAPSHOT
        // Include the required files that needs to be updated with new Version
        ant.replaceregexp(file:'build.gradle', match: '"opensearch.version", "\\d.*"', replace: '"opensearch.version", "' + newVersion.tokenize('-')[0] + '-SNAPSHOT"', flags:'g', byline:true)
    }
}

