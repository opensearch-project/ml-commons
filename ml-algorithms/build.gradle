/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */

import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'java'
    id 'jacoco'
    id "io.freefair.lombok"
    id 'com.diffplug.spotless' version '6.23.0'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation project(path: ":${rootProject.name}-spi", configuration: 'shadow')
    implementation project(path: ":${rootProject.name}-common", configuration: 'shadow')
    implementation project(':opensearch-ml-memory')
    compileOnly group: 'org.opensearch', name: 'opensearch', version: "${opensearch_version}"
    implementation "org.opensearch.client:opensearch-rest-client:${opensearch_version}"
    testImplementation "org.opensearch.test:framework:${opensearch_version}"
    implementation "org.opensearch:common-utils:${common_utils_version}"
    implementation ("org.jetbrains.kotlin:kotlin-stdlib:${kotlin_version}")
    implementation group: 'org.apache.commons', name: 'commons-text', version: '1.10.0'
    implementation group: 'org.reflections', name: 'reflections', version: '0.9.12'
    implementation group: 'org.tribuo', name: 'tribuo-clustering-kmeans', version: '4.2.1'
    implementation group: 'org.tribuo', name: 'tribuo-regression-sgd', version: '4.2.1'
    implementation group: 'org.tribuo', name: 'tribuo-anomaly-libsvm', version: '4.2.1'
    implementation group: 'org.tribuo', name: 'tribuo-classification-sgd', version: '4.2.1'
    implementation group: 'commons-io', name: 'commons-io', version: '2.15.1'
    implementation 'software.amazon.randomcutforest:randomcutforest-parkservices:3.0-rc3'
    implementation 'software.amazon.randomcutforest:randomcutforest-core:3.0-rc3'
    implementation group: 'io.protostuff', name: 'protostuff-core', version: '1.8.0'
    implementation group: 'io.protostuff', name: 'protostuff-runtime', version: '1.8.0'
    implementation group: 'io.protostuff', name: 'protostuff-api', version: '1.8.0'
    implementation group: 'io.protostuff', name: 'protostuff-collectionschema', version: '1.8.0'
    testImplementation group: 'junit', name: 'junit', version: '4.13.2'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.7.0'
    implementation group: 'com.google.guava', name: 'guava', version: '32.1.2-jre'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'
    implementation platform("ai.djl:bom:0.21.0")
    implementation group: 'ai.djl.pytorch', name: 'pytorch-model-zoo', version: '0.21.0'
    implementation group: 'ai.djl', name: 'api'
    implementation group: 'ai.djl.huggingface', name: 'tokenizers'
    implementation("ai.djl.onnxruntime:onnxruntime-engine:0.21.0") {
        exclude group: "com.microsoft.onnxruntime", module: "onnxruntime"
    }
    def os = DefaultNativePlatform.currentOperatingSystem
    //arm/macos doesn't support GPU
    if (os.macOsX || System.getProperty("os.arch") == "aarch64") {
        dependencies {
            implementation "com.microsoft.onnxruntime:onnxruntime:1.14.0"
        }
    } else {
        dependencies {
            implementation "com.microsoft.onnxruntime:onnxruntime_gpu:1.14.0"
        }
    }

    implementation platform('software.amazon.awssdk:bom:2.25.40')
    implementation 'software.amazon.awssdk:auth'
    implementation 'software.amazon.awssdk:apache-client'
    implementation 'com.amazonaws:aws-encryption-sdk-java:2.4.1'
    implementation 'com.jayway.jsonpath:json-path:2.9.0'
    implementation group: 'org.json', name: 'json', version: '20231013'
    implementation group: 'software.amazon.awssdk', name: 'netty-nio-client', version: '2.25.40'
}

lombok {
    version = "1.18.30"
}

configurations.all {
    resolutionStrategy.force 'com.google.protobuf:protobuf-java:3.21.9'
    resolutionStrategy.force 'org.apache.commons:commons-compress:1.26.0'
}

jacocoTestReport {
    reports {
        xml.getRequired().set(true)
        csv.getRequired().set(false)
        html.getRequired().set(true)
    }

    dependsOn test
}

List<String> jacocoExclusions = [
        // TODO: add more unit test to meet the minimal test coverage.
        'org.opensearch.ml.engine.algorithms.agent.MLConversationalFlowAgentRunner'
]

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                excludes = jacocoExclusions
                minimum = 0.65 //TODO: increase coverage to 0.90
            }
            limit {
                counter = 'BRANCH'
                excludes = jacocoExclusions
                minimum = 0.55 //TODO: increase coverage to 0.85
            }
        }
    }
    dependsOn jacocoTestReport
}
check.dependsOn jacocoTestCoverageVerification
compileJava.dependsOn(':opensearch-ml-common:shadowJar')

spotless {
    java {
        removeUnusedImports()
        importOrder 'java', 'javax', 'org', 'com'

        eclipse().configFile rootProject.file('.eclipseformat.xml')
    }
}
